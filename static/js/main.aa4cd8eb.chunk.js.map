{"version":3,"sources":["brainstorm.png","components/Button.js","components/Welcome.js","components/Setup.js","App.js","serviceWorker.js","index.js","Global.module.css"],"names":["module","exports","__webpack_require__","p","Button","props","react_default","a","createElement","className","classes","button","onClick","clicked","name","Welcome","Mira","img","src","require","width","components_Button","history","push","pathname","Setup","state","questions","correctAnswer","showItems","questionsNew","score","fetchData","fetch","then","response","json","_this","setState","results","console","log","nextQuestion","nextQuestionWrongAnswer","this","_this$state","currentQuestion","question","incorrect_answers","map","i","correct_answer","undefined","concat","Component","App","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0JAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0LCSzBC,EANA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAQC,OAAQC,QAASP,EAAMQ,SAAUR,EAAMS,OCS3DC,EAVC,SAACV,GACb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQM,MACpBV,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQO,IAAKC,IAAMC,EAAQ,IAAyBC,MAAM,UAC1Ed,EAAAC,EAAAC,cAACa,EAAD,CAAQP,KAAK,cAAcD,QAAS,WAAQR,EAAMiB,QAAQC,KAAK,CAAEC,SAAQ,gBC2CtEC,6MA/CXC,MAAQ,CACJC,UAAW,GACXC,cAAe,GACfC,UAAW,EACXC,aAAc,GACdC,MAAO,KAEXC,UAAY,WACRC,MAAO,yCACNC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GACJE,EAAKC,SAAS,CACZX,UAAWQ,EAASI,UAEtBC,QAAQC,IAAIJ,EAAKX,MAAME,oBAQ3Bc,aAAc,WACZL,EAAKC,SAAS,CACVT,UAAWQ,EAAKX,MAAMG,UAAY,EAClCE,MAAOM,EAAKX,MAAMK,MAAQ,OAGhCY,wBAAyB,WACvBN,EAAKC,SAAS,CACVT,UAAWQ,EAAKX,MAAMG,UAAY,wFAXtCe,KAAKZ,6CAeA,IAAAa,EACmCD,KAAKlB,MAArCC,EADHkB,EACGlB,UAAWE,EADdgB,EACchB,UAAWE,EADzBc,EACyBd,MAC9BS,QAAQC,IAAId,GACZ,IAAMmB,EAAkBnB,EAAUE,GAClC,OAASvB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQM,MAC5B8B,GAAmBxC,EAAAC,EAAAC,cAAA,WAAMsC,EAAgBC,SAASzC,EAAAC,EAAAC,cAAA,KAAGI,QAASgC,KAAKD,yBAA0BG,EAAgBE,kBAAkBC,IAAI,SAAAC,GAAC,OAAI5C,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQC,QAASuC,MAAc5C,EAAAC,EAAAC,cAAA,KAAIC,UAAWC,IAAQC,OAAQC,QAASgC,KAAKF,cAAeI,EAAgBK,sBAElPC,IAApBN,GAAuD,KAApBA,EAApC,kBAAAO,OAAgFtB,GAAU,aA1C/EuB,oBCkBLC,mLAXT,OACEjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACIlD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW5C,IACjCT,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWlC,aANlC6B,aCGEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECXNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,KAAQ7D,EAAAC,EAAAC,cAAC4D,EAAD,OAAkBC,SAASC,eAAe,SD0H5D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC,kCElInB3E,EAAAC,QAAA,CAAkBe,KAAA,qBAAAL,OAAA,uBAAAM,IAAA","file":"static/js/main.aa4cd8eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brainstorm.7328a5f0.png\";","import React from 'react';\r\nimport classes from '../Global.module.css'\r\n\r\nconst Button = (props) => {\r\n    return ( \r\n        <button className={classes.button} onClick={props.clicked}>{props.name}</button>\r\n     );\r\n}\r\n \r\nexport default Button;","import React, {Component} from 'react';\r\nimport Button from './Button';\r\nimport classes from '../Global.module.css'\r\n\r\nconst Welcome = (props) => {\r\n    return ( \r\n        <div className={classes.Mira}>\r\n            <h1>Welcome to Brainstorm</h1>\r\n            <img className={classes.img} src={ require('./../brainstorm.png')}  width=\"150px\" />\r\n            <Button name=\"Get Started\" clicked={() => { props.history.push({ pathname: `/setup`}) }}/>\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default Welcome;","import React, {Component} from 'react';\r\nimport Button from './Button';\r\nimport classes from '../Global.module.css'\r\n\r\nclass Setup extends Component {\r\n    state = { \r\n        questions: [],\r\n        correctAnswer: '',\r\n        showItems: 0,\r\n        questionsNew: [],\r\n        score: 0\r\n     }\r\n    fetchData = () => {\r\n        fetch( 'https://opentdb.com/api.php?amount=10')\r\n        .then(response => response.json())\r\n        .then(response => {\r\n          this.setState({\r\n            questions: response.results\r\n          })\r\n          console.log(this.state.correctAnswer)\r\n         })\r\n      }\r\n    \r\n      componentDidMount() {\r\n        this.fetchData()\r\n        \r\n      }\r\n      nextQuestion= () => {\r\n        this.setState({\r\n            showItems: this.state.showItems + 1,\r\n            score: this.state.score + 1\r\n        })\r\n      }\r\n      nextQuestionWrongAnswer= () => {\r\n        this.setState({\r\n            showItems: this.state.showItems + 1,\r\n            \r\n        })\r\n      }\r\n    render() { \r\n        const { questions, showItems, score } = this.state;\r\n        console.log(questions)\r\n        const currentQuestion = questions[showItems]\r\n        return ( <div className={classes.Mira}>\r\n            {currentQuestion && <div>{currentQuestion.question}<p onClick={this.nextQuestionWrongAnswer}>{currentQuestion.incorrect_answers.map(i => <div className={classes.button}>{i}</div>)}</p><p  className={classes.button} onClick={this.nextQuestion}>{currentQuestion.correct_answer}</p></div>}\r\n        {/* {console.log('Current Question',currentQuestion)} */}\r\n        {(currentQuestion === undefined) || (currentQuestion === '') ? `Your score is: ${score}` : null}\r\n        {/* <Button name=\"Next Question\" clicked={this.nextQuestion}/> */}\r\n        </div> );\r\n    }\r\n}\r\n \r\nexport default Setup;","import React, { Component }  from 'react';\nimport './App.css';\nimport Welcome from './components/Welcome';\nimport Setup from './components/Setup';\nimport { Route,\n  Switch } from 'react-router-dom';\n  \n\n\nclass App extends Component {\n  render() {\n      return (\n        <div className=\"App\">\n          <Switch>\n              <Route exact path=\"/\" component={Welcome} />\n              <Route exact path=\"/setup\" component={Setup} />\n          </Switch>\n        </div>\n      );\n    }\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Mira\":\"Global_Mira__KoF2G\",\"button\":\"Global_button__392h2\",\"img\":\"Global_img__fBCnv\"};"],"sourceRoot":""}